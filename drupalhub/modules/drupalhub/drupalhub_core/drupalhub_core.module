<?php
/**
 * @file
 * Code for the DrupalHub feature.
 */

include_once 'drupalhub_core.features.inc';

/**
 * Implements hook_menu().
 */
function drupalhub_core_menu() {
  $items = array();

  $items['admin/config/drupalhub/global-settings'] = array(
    'title' => 'Manage settings',
    'description' => 'Manage reputation settings',
    'access arguments' => array('manage drupalhub settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupalhub_core_settings'),
  );

  $items['drupalhub_core/autocomplete'] = array(
    'title' => 'Node autocomplete',
    'page callback' => 'drupalhub_core_autocomplete',
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function drupalhub_core_init() {
  drupal_add_css(libraries_get_path('font_awesome') . '/css/font-awesome.min.css');

  $item = menu_get_item();
  if (drupal_is_front_page() || path_is_admin($item['path'])) {
    return;
  }

  $breadcrumbs = array(l(t('Home'), 'front'));

  if ($item['path'] == 'questions') {
    drupal_set_title(t('Questions'));
  }
  elseif ($item['path'] == 'blogs') {
    drupal_set_title(t('Blogs'));
  }
  elseif ($item['path'] == 'calendar') {
    drupal_set_title(t('Calendar'));
  }
  elseif ($item['path'] == 'node/%') {
    $object = menu_get_object();
    if ($object->type == 'question') {
      $breadcrumbs[] = l(t('Question'), 'questions');
    }
    elseif ($object->type == 'blog') {
      $breadcrumbs[] = l(t('Blogs'), 'blogs');
    }
    elseif ($object->type == 'events') {
      $breadcrumbs[] = l(t('Calendar'), 'calendar');
    }
  }

  drupal_set_breadcrumb($breadcrumbs);
}

/**
 * Implements hook_permission().
 */
function drupalhub_core_permissions() {
  return array(
    'manage drupalhub settings' => array(
      'title' => t('Managing DrupalHub'),
      'description' => t('Grant to the user the permission to manage DrupalHub settings.')
    ),
  );
}

/**
 * Return a link for open a modal window.
 *
 * @param $info
 *  Array with information about the link:
 *    - text: The text for the link.
 *    - href: The path for the page.
 *    - class: The class of the link.
 *    - modal_settings: Ctools modal settings.
 *
 * @return String
 *  An HTML markup for the ctools modal link.
 *
 * @code
 *  drupalhub_core_modal_window(array(
 *    'text' => 'Happy text!',
 *    'href' => 'happy-text',
 *    'class' => 'happy-text',
 *    'modal_settings' => array(
 *      'modalSize' => array(
 *        'type' => 'fixed',
 *        'width' => 600,
 *        'height' => 20,
 *        'addWidth' => 10,
 *        'addHeight' => 10,
 *        'contentRight' => 0,
 *        'contentBottom' => 0,
 *      ),
 *      'modalOptions' => array('opacity' => .6),
 *      'animation' => 'fadeIn',
 *    ),
 *  ));
 * @endcode
 */
function drupalhub_core_modal_window($info) {
  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();

  // Ctools modal settings.
  $modal_settings = array(
    $info['class'] => $info['modal_settings'],
  );
  drupal_add_js($modal_settings, 'setting');

  $href = $info['href'] . '/nojs';
  return ctools_modal_text_button($info['text'], $href, '', 'ctools-modal-' . $info['class']);
}

/**
 * Return a markup for a ctools page markup.
 *
 * @param $title
 *  The title of the page.
 * @param $content
 *  The content of the page.
 * @param $js
 *  Determine if the JS is enabled or not. Allowed valued: js, nojs.
 *
 * @code
 *  return drupalhub_core_modal_page_render($title, $content, $js);
 * @endcode
 */
function drupalhub_core_modal_page_render($title, $content, $js) {
  if ($js) {
    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_render($title, $content);
  }
  else {
    return $content;
  }
}

/**
 * Return a markup for the ctools form modal.
 *
 * @param $title
 *  The title of the form.
 * @param $form_id
 *  The form ID.
 * @param $ajax
 *  Determine if the JS is enabled. Allowed valued: js, nojs.
 * @param $additional
 *  Additional information to the form state.
 *
 * @return Array
 *  The form render-able array or print the ajax render.
 *
 * @see http://deeson-online.co.uk/labs/insert-form-pop-modal-ctools-and-drupal-7
 * for reference.
 *
 * @code
 *  return drupalhub_core_modal_form(t('Happy!'), 'happy_modal', TRUE);
 * @endcode
 */
function drupalhub_core_modal_form($title, $form_id, $ajax, $additional) {
  if ($ajax) {
    ctools_include('modal');
    ctools_include('ajax');

    $form_state = array(
      'ajax' => TRUE,
      'title' => $title,
      'additional' => $additional,
    );

    $output = ctools_modal_form_wrapper($form_id, $form_state);

    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form($form_id);
  }
}

/**
 * Implements hook_ctools_plugin_directory()
 */
function drupalhub_core_ctools_plugin_directory($module, $plugin) {
  if (in_array($module, array("panels", 'ctools')) && !empty($plugin)) {
    return "plugins/$plugin";
  }

  if ($module == 'vud' && $plugin == 'widgets') {
    return 'plugins/widgets';
  }
}

function drupalhub_core_prepare_node($type) {
  global $user;
  $node = (object) array(
    'uid' => $user->uid,
    'name' => (isset($user->name) ? $user->name : ''),
    'type' => $type,
    'language' => LANGUAGE_NONE
  );

  return $node;
}

/**
 * Settings form.
 */
function drupalhub_core_settings($form, $form_settings) {
  $form['drupal_of_the_month'] = array(
    '#type' => 'textfield',
    '#title' => 'Drupal of the month',
    '#autocomplete_path' => 'drupalhub_core/autocomplete',
  );

  if ($node = node_load(variable_get('drupal_of_the_month'))) {
    $form['drupal_of_the_month']['#default_value'] = $node->title . ' (' . $node->nid . ')';
  }

  $form = system_settings_form($form);

  $form['#submit'][] = 'drupalhub_core_set_drupal_of_the_month';
  return $form;
}

/**
 * Submit handler; Set the ID of the drupal of the month properly.
 */
function drupalhub_core_set_drupal_of_the_month($form, $form_state) {
  $form_state['values']['drupal_of_the_month'];

  preg_match("/.+\((\d+)\)/", $form_state['values']['drupal_of_the_month'], $matches);

  variable_set('drupal_of_the_month', $matches[1]);
}

/**
 * Return list of nodes for the drupal of the month plugin.
 */
function drupalhub_core_autocomplete($string = '') {
  $query = new EntityFieldQuery();
  $results = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('title', '%' . $string . '%', 'LIKE')
    ->execute();

  if (empty($results['node'])) {
    return;
  }

  $nodes = node_load_multiple(array_keys($results['node']));

  $data = array();

  foreach ($nodes as $node) {
    $data[$node->title . ' (' . $node->nid . ')'] = $node->title;
  }

  drupal_json_output($data);
}

/**
 * Implements hook_theme().
 */
function drupalhub_core_theme() {
  return array(
    'time_name_tags' => array(
      'template' => 'time-name-tags',
      'path' => drupal_get_path('module', 'drupalhub_core') . '/templates',
      'variables' => array(
        'time' => NULL,
        'name' => NULL,
        'tags' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function drupalhub_core_views_api() {
  return array(
    'api' => '3',
  );
}

/**
 * Implements hook_form_alter().
 *
 * Handle the comments form for nodes by removing elements.
 */
function drupalhub_core_form_alter(&$form, $form_state, $form_id) {
  if (!in_array($form_id, array('comment_node_events_form', 'comment_node_question_form', 'comment_node_blog_form'))) {
    return;
  }

  $form['#after_build'][] = 'drupalhub_core_comments_form';

  $form['comment_body'][LANGUAGE_NONE][0]['#title'] = t('Add comment:');
}

/**
 * After build callback; Hide elements from the comment form.
 */
function drupalhub_core_comments_form($form, $form_state) {
  hide($form['author']);
  hide($form['subject']);
  hide($form['comment_body'][LANGUAGE_NONE][0]['format']);

  return $form;
}

