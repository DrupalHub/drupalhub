<?php
/**
 * @file
 * Code for the DrupalHub feature.
 */

include_once 'drupalhub_core.features.inc';

/**
 * Implements hook_menu().
 */
function drupalhub_core_menu() {
  $items = array();

  $items['admin/config/drupalhub/global-settings'] = array(
    'title' => 'Manage settings',
    'description' => 'Manage reputation settings',
    'access arguments' => array('manage drupalhub settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupalhub_core_settings'),
  );

  $items['drupalhub_core/autocomplete'] = array(
    'title' => 'Node autocomplete',
    'page callback' => 'drupalhub_core_autocomplete',
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function drupalhub_core_init() {
  global $base_url;
  drupal_add_css(libraries_get_path('font_awesome') . '/css/font-awesome.min.css');

  $settings['hub'] = array(
    'basePath' => $base_url,
    'csrfToken' => drupal_get_token(\RestfulInterface::TOKEN_VALUE),
  );
  drupal_add_js($settings, 'setting');

  $item = menu_get_item();
  if (drupal_is_front_page() || path_is_admin($item['path'])) {
    return;
  }

  $breadcrumbs = array(l(t('Home'), 'front'));

  if ($item['path'] == 'questions') {
    drupal_set_title(t('Questions'));
  }
  elseif ($item['path'] == 'blogs') {
    drupal_set_title(t('Blogs'));
  }
  elseif ($item['path'] == 'calendar') {
    drupal_set_title(t('Calendar'));
  }
  elseif ($item['path'] == 'video/playlists') {
    $breadcrumbs[] = l(t('Video library'), 'video');
    drupal_set_title(t('Manage play lists'));
  }
  elseif ($item['path'] == 'video') {
    drupal_set_title(t('Video library'));
  }
  elseif ($item['path'] == 'documentation') {
    drupal_set_title(t('Documentation'));
  }
  elseif ($item['path'] == 'node/%') {
    $object = menu_get_object();

    $bundles = array(
      'question' => l(t('Question'), 'questions'),
      'blog' => l(t('Blogs'), 'blogs'),
      'events' => l(t('Calendar'), 'calendar'),
      'youtube' => l(t('Video library'), 'video'),
      'wiki' => l(t('Documentation'), 'documentation'),
    );

    if (isset($bundles[$object->type])) {
      $breadcrumbs[] = $bundles[$object->type];
    }
  }
  elseif ($item['path'] == 'documentation/term/%') {
    $breadcrumbs[] = l(t('Documentation'), 'documentation');
    drupal_set_title($item['map'][2]->data->name);
  }

  drupal_set_breadcrumb($breadcrumbs);
}

/**
 * Implements hook_permission().
 */
function drupalhub_core_permissions() {
  return array(
    'manage drupalhub settings' => array(
      'title' => t('Managing DrupalHub'),
      'description' => t('Grant to the user the permission to manage DrupalHub settings.')
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory()
 */
function drupalhub_core_ctools_plugin_directory($module, $plugin) {
  if (in_array($module, array("panels", 'ctools')) && !empty($plugin)) {
    return "plugins/$plugin";
  }

  if ($module == 'vud' && $plugin == 'widgets') {
    return 'plugins/widgets';
  }
}

function drupalhub_core_prepare_node($type) {
  global $user;
  $node = (object) array(
    'uid' => $user->uid,
    'name' => (isset($user->name) ? $user->name : ''),
    'type' => $type,
    'language' => LANGUAGE_NONE
  );

  return $node;
}

/**
 * Settings form.
 */
function drupalhub_core_settings($form, $form_settings) {
  $form['drupal_of_the_month'] = array(
    '#type' => 'textfield',
    '#title' => 'Drupal of the month',
    '#autocomplete_path' => 'drupalhub_core/autocomplete',
  );

  if ($node = node_load(variable_get('drupal_of_the_month'))) {
    $form['drupal_of_the_month']['#default_value'] = $node->title . ' (' . $node->nid . ')';
  }

  $form = system_settings_form($form);

  $form['#submit'][] = 'drupalhub_core_set_drupal_of_the_month';
  return $form;
}

/**
 * Submit handler; Set the ID of the drupal of the month properly.
 */
function drupalhub_core_set_drupal_of_the_month($form, $form_state) {
  $form_state['values']['drupal_of_the_month'];

  preg_match("/.+\((\d+)\)/", $form_state['values']['drupal_of_the_month'], $matches);

  variable_set('drupal_of_the_month', $matches[1]);
}

/**
 * Return list of nodes for the drupal of the month plugin.
 */
function drupalhub_core_autocomplete($string = '') {
  $query = new EntityFieldQuery();
  $results = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('title', '%' . $string . '%', 'LIKE')
    ->execute();

  if (empty($results['node'])) {
    return;
  }

  $nodes = node_load_multiple(array_keys($results['node']));

  $data = array();

  foreach ($nodes as $node) {
    $data[$node->title . ' (' . $node->nid . ')'] = $node->title;
  }

  drupal_json_output($data);
}

/**
 * Implements hook_theme().
 */
function drupalhub_core_theme() {
  return array(
    'time_name_tags' => array(
      'template' => 'time-name-tags',
      'path' => drupal_get_path('module', 'drupalhub_core') . '/templates',
      'variables' => array(
        'time' => NULL,
        'name' => NULL,
        'tags' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function drupalhub_core_views_api() {
  return array(
    'api' => '3',
  );
}

/**
 * Implements hook_form_alter().
 *
 * Handle the comments form for nodes by removing elements.
 */
function drupalhub_core_form_alter(&$form, $form_state, $form_id) {
  $forms = array(
    'comment_node_events_form',
    'comment_node_question_form',
    'comment_node_blog_form',
    'comment_node_youtube_form',
    'comment_node_wiki_form',
  );

  if (!in_array($form_id, $forms)) {
    return;
  }

  $form['#after_build'][] = 'drupalhub_core_comments_form';

  $form['comment_body'][LANGUAGE_NONE][0]['#title'] = t('Add comment:');
}

/**
 * After build callback; Hide elements from the comment form.
 */
function drupalhub_core_comments_form($form, $form_state) {
  hide($form['author']);
  hide($form['subject']);
  $form['comment_body'][LANGUAGE_NONE][0]['format']['#attributes']['class'][] = 'hidden';
  return $form;
}

/**
 * Adding the wysywig JS to the page.
 *
 * @param $type
 *   The bundle of the node.
 */
function drupalhub_core_ckeditor_add_assets($type) {
  global $user;
  module_load_include('inc', 'node', 'node.pages');
  $node = (object) array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => $type, 'language' => LANGUAGE_NONE);
  $form = drupal_get_form($type . '_node_form', $node);
  drupal_render($form);
}

/**
 * Implements hook_libraries_info().
 */
function drupalhub_core_libraries_info() {
  $libraries['angular'] = array(
    'name' => t('Angular JS'),
    'files' => array(
      'js' => array('angular.js'),
    ),
  );
  return $libraries;
}
