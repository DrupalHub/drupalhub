<?php
/**
 * @file
 * drupalhub_reputation.module
 */

/**
 * Implements hook_menu().
 */
function drupalhub_reputation_menu() {
  $items = array();

  $items['admin/config/drupalhub'] = array(
    'title' => 'DrupalHub',
    'description' => 'DrupalHub settings.',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('manage drupalhub settings'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/drupalhub/reputation'] = array(
    'title' => 'Manage reputation',
    'description' => 'Manage reputation settings',
    'access arguments' => array('manage drupalhub settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupalhub_reputation_admin_settings'),
  );

  return $items;
}

/**
 * Setting the amount of points when a comment/node was updated.
 */
function drupalhub_reputation_admin_settings($form, $form_state) {

  $form['drupalhub_max_points_upvote'] = array(
    '#type' => 'textfield',
    '#title' => t("Maximum votes for upvoting"),
    '#default_value' => variable_get('drupalhub_max_points_upvote', 5),
  );

  $form['drupalhub_min_points_downvote'] = array(
    '#type' => 'textfield',
    '#title' => t("Minimum votes for downvoting"),
    '#default_value' => variable_get('drupalhub_min_points_downvote', 20),
  );

  $form['drupalhub_points_for_question_create'] = array(
    '#type' => 'textfield',
    '#title' => t('Set the number of points user get when posting for a question'),
    '#default_value' => variable_get('drupalhub_points_for_question_create', 1),
  );

  $form['drupalhub_points_for_comment_create'] = array(
    '#type' => 'textfield',
    '#title' => t('Set the number of points user get when commenting for a question'),
    '#default_value' => variable_get('drupalhub_points_for_comment_create', 1),
  );

  $form['drupalhub_points_for_vote_question_node'] = array(
    '#type' => 'textfield',
    '#title' => t('Set the number of points user get when voting for his question'),
    '#default_value' => variable_get('drupalhub_points_for_vote_question', 1),
  );

  $form['drupalhub_points_for_vote_question_comment'] = array(
    '#type' => 'textfield',
    '#title' => t("Set the number of points user get when voting for his question's comment"),
    '#default_value' => variable_get('drupalhub_points_for_vote_question_comment', 1),
  );

  return system_settings_form($form);
}

/**
 * Adding or decreasing amount of the user point.
 *
 * @param $user
 *  The user object or ID.
 * @param $amount
 *  The number of points.
 */
function drupalhub_reputation_update_score($user, $amount) {
  $wrapper = entity_metadata_wrapper('user', $user);

  $current_point = $wrapper->field_reputation->value();
  $new_point = $current_point + $amount;
  $wrapper->field_reputation->set($new_point);
  $wrapper->save();
}

/**
 * Implements hook_drupalhub_vote().
 */
function drupalhub_reputation_drupalhub_vote($vote, $account) {
  $wrapper = entity_metadata_wrapper($vote['entity_type'], $vote['entity_id']);

  $type = '';

  if ($vote['entity_type'] == 'comment') {
    $type = $wrapper->node->getBundle();
  }
  elseif ($vote['entity_type'] == 'node') {
    $type = $wrapper->getBundle();
  }

  if ($type != 'question') {
    return;
  }

  $add_points = $vote['value'] * variable_get('drupalhub_points_for_vote_question_' . $vote['entity_type'], 1);
  drupalhub_reputation_update_score($wrapper->author->getIdentifier(), $add_points);
}

/**
 * Implements hook_node_insert().
 */
function drupalhub_reputation_node_insert($node) {
  if ($node->uid && $node->type == 'question') {
    drupalhub_reputation_update_score($node->uid, variable_get('drupalhub_points_for_question_create', 1));
  }
}

/**
 * Implements hook_comment_insert().
 * 
 * call drupalhub_reputation_update_score just if:
 * A. Comment's node type is question. 
 * B. Comment belong to authenticated user.
 * C. User didn't commenting on his own questions.
 */
function drupalhub_reputation_comment_insert($comment) {
  $wrapper = entity_metadata_wrapper('comment', $comment->cid);
  
  if ($wrapper->node->getBundle() == 'question' && $wrapper->author->getIdentifier() && $wrapper->author->getIdentifier() != $wrapper->node->author->getIdentifier()) {
    drupalhub_reputation_update_score($wrapper->author->getIdentifier(), variable_get('drupalhub_points_for_comment_create', 1));
  }
}
