<?php
/**
 * @file
 * Code for the DrupalHub search feature.
 */

include_once 'drupalhub_search.features.inc';

/**
 * Implements hook_menu().
 */
function drupalhub_search_menu() {
  $items = array();

  $items['search_results/%'] = array(
    'page callback' => 'drupalhub_search_results',
    'title callback' => 'drupalhub_search_results_title_callback',
    'title arguments' => array(1),
    'access callback' => TRUE,
    'page arguments' => array(1),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function drupalhub_search_theme() {
  return array(
    'drupalhub_search_box' => array(
      'template' => 'search-box',
      'path' => drupal_get_path('module', 'drupalhub_search') . '/template',
    ),
  );
}

/**
 * Title callback; Display the search keyword as part of the word.
 */
function drupalhub_search_results_title_callback($value) {
  return t('Search result for @q', array('@q' => $value));
}

/**
 * Page callback. Return the search results.
 */
function drupalhub_search_results($value) {
  $indexes = array(
    'node' => t('Content'),
    'taxonomy_term' => t('Tags'),
    'user' => t('Users'),
    'comment' => t('Comments'),
  );

  $search_results = array();

  foreach ($indexes as $index => $label) {

    if (empty($results[$label])) {
      $search_results[$label] = array();
    }

    $search_results[$label] += drupalhub_search_get_results($index, $value);
  }

  $content = '';
  foreach ($search_results as $index => $results) {
    if (!$results) {
      continue;
    }

    $content .= "<h2>" . $index . "</h2>";
    foreach ($results as $result) {
      $content .= theme('drupalhub_search_box', $result);
    }
  }

  return $content;
}

/**
 * Running search against a given query.
 *
 * @param $index
 *   The index which the query will run against.
 * @param $value
 *   The value to search.
 * @return array
 *   Array of results.
 */
function drupalhub_search_get_results($index, $value) {
  $search = new DrupalHubSearch($index);
  $results = array();

  foreach ($search->getFields() as $field) {
    $search->OrCondition($field, $value);
  }

  // Display only videos from the video page. keep this until the group section
  // will complete.
  if ($search->getEntityType() == 'node') {
//    $search->condition('field_show_in_videos', TRUE);
  }

  $entities = $search->execute();

  if (!$entities) {
    return array();
  }

  foreach ($entities as $entity) {
    $wrapper = entity_metadata_wrapper($search->getEntityType(), $entity);
    $body = '';

    if ($wrapper->type() == 'comment' && $wrapper->__isset('comment_body') && $wrapper->comment_body->value()) {
      $body = views_trim_text(array('max_length' => 50, 'ellipsis' => TRUE), filter_xss($wrapper->comment_body->value->value()));
    }
    else if ($wrapper->type() != 'comment' && $wrapper->__isset('body') && $wrapper->body->value()) {
      $body = views_trim_text(array('max_length' => 50, 'ellipsis' => TRUE), filter_xss($wrapper->body->value->value()));
    }

    $uri = entity_uri($search->getEntityType(), $wrapper->value());

    if ($wrapper->type() == 'user') {
      $image = theme('image_style', array(
        'style_name' => 'front_page_question',
        'path' => _drupalhub_users_user_uri($wrapper->value()),
      ));
    }
    else {
      $image = '';

      if ($wrapper->__isset('author')) {
        $image = theme('image_style', array(
          'style_name' => 'front_page_question',
          'path' => _drupalhub_users_user_uri($wrapper->author->value())
        ));
      }
    }

    $results[] = array(
      'image' => $image,
      'self' => url($uri['path']),
      'label' => $wrapper->label(),
      'body' => $body,
    );
  }

  return $results;
}

/**
 *  Implements hook_search_api_index_items_alter().
 */
function drupalhub_search_search_api_index_items_alter(array &$items, SearchApiIndex $index) {
  foreach ($items as $delta => $item) {
    $wrapper = entity_metadata_wrapper('node', $item);

    if ($wrapper->getBundle() != 'youtube') {
      continue;
    }

    if (!$wrapper->field_show_in_videos->value()) {
      unset($items[$delta]);
    }
  }
}