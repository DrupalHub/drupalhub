<?php
/**
 * @file
 * Main module file for notifying users on actions which they concerned to them.
 */

include_once('drupalhub_notify.features.inc');

/**
 * Implements hook_entity_insert().
 */
function drupalhub_notify_entity_insert($entity, $type) {

  if (!variable_get('drupalhub_push_notifications', FALSE)) {
    return;
  }

  if ($type == 'node') {

    if (in_array($entity->type, array('drupalhub_group', 'group_banner', 'playlist', 'project', 'recommendation'))) {
      // Not the node type we are listen to.
      return;
    }

    $action = 'new ' . $entity->type;
    $send = array(
      'title' => $entity->title,
      'uid' => $entity->uid,
      'nid' => $entity->nid,
      'bundle' => $entity->type,
    );
  }
  else if ($type == 'comment') {
    $handler = restful_get_restful_handler('comments');
    $action = 'new comment';
    $send = array(
      'nid' => $entity->nid,
      'uid' => $entity->uid,
      'object' => $handler->viewEntity($entity->cid),
    );
  }
  else {
    // No an entity type we need to notify user about.
    return;
  }

  drupalhub_core_socket_io_send($action, $send);
}

/**
 * Sending message to pusher for other users could be notify.
 *
 * @param $action
 *   The action that caused this notify: new node, new comment etc. etc.
 * @param $data
 *   The data we need to send to pusher. The listener, front end or nodeJS,
 *   should tear it down and act according to the content.
 */
function drupalhub_core_socket_io_send($action, $data) {
  // Include the pusher library.
  drupalhub_core_load_pusher();

  // Get the pusher settings.
  $pusher_settings = variable_get('pusher');

  $pusher = new Pusher(
    $pusher_settings['key'],
    $pusher_settings['secret'],
    $pusher_settings['app_id'],
    array('encrypted' => true)
  );

  // Trigger pusher.
  $pusher->trigger('drupalhub_drupalhub', $action, $data);
}

/**
 * Sending message to the users.
 *
 * @param Message $message
 *   The message object.
 * @param String $entity_type
 *   The entity type. Used for message subscribe.
 * @param null $entity
 *   The entity object. Used for message subscribe.
 */
function drupalhub_notify_send_message($message, $entity_type = NULL, $entity = NULL) {
  message_notify_send_message($message);
  if (module_exists('message_subscribe')) {
    message_subscribe_send_message($entity_type, $entity, $message);
  }
}

/**
 * Implements hook_node_insert().
 */
function drupalhub_notify_node_insert($node) {
  if (!in_array($node->type, array('question', 'blog'))) {
    return;
  }

  $message = message_create('created_node', array('uid' => $node->uid));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_node->set($node);

  drupalhub_notify_send_message($message);
}

/**
 * Implements hook_comment_insert().
 */
function drupalhub_notify_comment_insert($comment) {
  $message = message_create('commented_to_node', array('uid' => $comment->uid));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_comment->set($comment);

  drupalhub_notify_send_message($message, 'comment', $comment);
}

/**
 * Implements hook_votingapi_insert().
 */
function drupalhub_notify_votingapi_insert($votes) {
  $vote = $votes[0];
  $wrapper = entity_metadata_wrapper($vote['entity_type'], $vote['entity_id']);
  $identifier = $wrapper->type() . ':' . $wrapper->getIdentifier();
  $uri = entity_uri($wrapper->type(), $wrapper->value());

  // Check if there any message for the entity the user just voted for.
  $query = new EntityFieldQuery();
  $count = $query
    ->entityCondition('entity_type', 'message')
    ->propertyCondition('uid', $vote['uid'])
    ->fieldCondition('field_entity_identifier', 'value', $identifier)
    ->count()
    ->execute();

  if ($count) {
    // The user already voted/down voted for the entity. We don't need to create
    // another message for that.
    return;
  }

  // Get default variables.
  $type = $wrapper->type() == 'comment' ? t('comment') : t('node');
  $label = $wrapper->label();
  $action = $vote['value'] === 1 ? t('Up voted') : t('Down voted');
  $uri = $uri['path'];

  // Create the message.
  $message = message_create('user_down_up_voted', array('uid' => $vote['uid']));
  $message->arguments = array(
    '@uri' => $uri,
    '@type' => $type,
    '@label' => $label,
    '@action' => $action,
  );
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_entity_identifier->set($identifier);
  $wrapper->save();
}
