<?php
/**
 * @file
 * Main module file for notifying users on actions which they concerned to them.
 */

include_once('drupalhub_notify.features.inc');

/**
 * Implements hook_entity_insert().
 */
function drupalhub_notify_entity_insert($entity, $type) {

  if (!variable_get('drupalhub_push_notifications', FALSE)) {
    return;
  }

  if ($type == 'node') {

    if (in_array($entity->type, array('drupalhub_group', 'group_banner', 'playlist', 'project', 'recommendation'))) {
      // Not the node type we are listen to.
      return;
    }

    $action = 'new ' . $entity->type;
    $send = array(
      'title' => $entity->title,
      'uid' => $entity->uid,
      'nid' => $entity->nid,
      'bundle' => $entity->type,
    );
  }
  else if ($type == 'comment') {
    $handler = restful_get_restful_handler('comments');
    $action = 'new comment';
    $send = array(
      'nid' => $entity->nid,
      'uid' => $entity->uid,
      'object' => $handler->viewEntity($entity->cid),
    );
  }
  else {
    // No an entity type we need to notify user about.
    return;
  }

  drupalhub_core_socket_io_send($action, $send);
}

/**
 * Sending message to pusher for other users could be notify.
 *
 * @param $action
 *   The action that caused this notify: new node, new comment etc. etc.
 * @param $data
 *   The data we need to send to pusher. The listener, front end or nodeJS,
 *   should tear it down and act according to the content.
 */
function drupalhub_core_socket_io_send($action, $data) {
  // Include the pusher library.
  drupalhub_core_load_pusher();

  // Get the pusher settings.
  $pusher_settings = variable_get('pusher');

  $pusher = new Pusher(
    $pusher_settings['key'],
    $pusher_settings['secret'],
    $pusher_settings['app_id'],
    array('encrypted' => true)
  );

  // Trigger pusher.
  $pusher->trigger('drupalhub_drupalhub', $action, $data);
}

/**
 * Implements hook_comment_insert().
 */
function drupalhub_notify_comment_insert($comment) {
  global $user;
  $account = clone $user;

  // todo: Flag the user the node if not flagged.

  $message = message_create('comment_on_followed_node', array('uid' => $account->uid));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_node->set($comment->nid);
  $wrapper->field_comment->set($comment);
  $wrapper->field_user->set($user);
  $wrapper->save();

  message_subscribe_send_message('node', node_load($comment->nid), $message);
}