<?php
/**
 * @file
 * Code for the drupalhub_users feature.
 */

include_once 'drupalhub_users.features.inc';

/**
 * Implement hook_theme().
 */
function drupalhub_users_theme() {
  return array(
    'drupalhub_users_login_form' => array(
      'render element' => 'form',
      'template' => 'login-form',
      'path' => drupal_get_path('module', 'drupalhub_users') . '/templates',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupalhub_users_form_user_login_alter(&$form, $form_state) {
  $form['#theme'] = 'drupalhub_users_login_form';
  $form['name']['#title'] = '';
  $form['pass']['#title'] = '';

  $form['name']['#show-required'] = FALSE;
  $form['pass']['#show-required'] = FALSE;
}

/**
 * Implements hook_ctools_plugins_directory().
 */
function drupalhub_users_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_account_created().
 */
function drupalhub_users_user_insert(&$edit, $account, $category) {
  $message = message_create('new_user', array('uid' => $account->uid));
  $message->save();
}

/**
 * Implements hook_node_insert().
 */
function drupalhub_users_node_insert($node) {
  $message = message_create('created_node', array('uid' => $node->uid));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_node->set($node);
  $wrapper->save();
}

/**
 * Implements hook_comment_insert().
 */
function drupalhub_users_comment_insert($comment) {
  $message = message_create('commented_to_node', array('uid' => $comment->uid));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_comment->set($comment);
  $wrapper->save();
}

/**
 * Implements hook_votingapi_insert().
 */
function drupalhub_users_votingapi_insert($votes) {
  $vote = $votes[0];
  $wrapper = entity_metadata_wrapper($vote['entity_type'], $vote['entity_id']);
  $identifier = $wrapper->type() . ':' . $wrapper->getIdentifier();
  $uri = entity_uri($wrapper->type(), $wrapper->value());

  // Check if there any message for the entity the user just voted for.
  $query = new EntityFieldQuery();
  $count = $query
    ->entityCondition('entity_type', 'message')
    ->propertyCondition('uid', $vote['uid'])
    ->fieldCondition('field_entity_identifier', 'value', $identifier)
    ->count()
    ->execute();

  if ($count) {
    // The user already voted/down voted for the entity. We don't need to create
    // another message for that.
    return;
  }

  // Get default variables.
  $type = $wrapper->type() == 'comment' ? t('comment') : t('node');
  $label = $wrapper->label();
  $action = $vote['value'] === 1 ? t('Up voted') : t('Down voted');
  $uri = $uri['path'];

  // Create the message.
  $message = message_create('user_down_up_voted', array('uid' => $vote['uid']));
  $message->arguments = array(
    '@uri' => $uri,
    '@type' => $type,
    '@label' => $label,
    '@action' => $action,
  );
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_entity_identifier->set($identifier);
  $wrapper->save();
}

/**
 * Implementing hook_preprocess_drupalhub_user().
 */
function drupalhub_users_preprocess_drupalhub_user(&$variables) {
  drupal_add_js(drupal_get_path('module', 'drupalhub_users') . '/js/user.js');
  $user = reset($variables['display']->context)->data;
  $variables['image'] = theme('image_style', array('path' => $user->picture->uri, 'style_name' => 'thumbnail_retina'));
  $variables['name'] = $user->name;
}