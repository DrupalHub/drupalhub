<?php
/**
 * @file
 * Code for the drupalhub_users feature.
 */

include_once 'drupalhub_users.features.inc';

/**
 * Implements hook_account_created().
 */
function drupalhub_users_user_insert(&$edit, $account, $category) {
  $message = message_create('new_user', array('uid' => $account->uid));
  $message->save();
}

/**
 * Implements hook_node_insert().
 */
function drupalhub_users_node_insert($node) {
  if (!in_array($node->type, array('question', 'blog'))) {
    return;
  }

  $message = message_create('created_node', array('uid' => $node->uid));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_node->set($node);
  $wrapper->save();
}

/**
 * Implements hook_comment_insert().
 */
function drupalhub_users_comment_insert($comment) {
  $message = message_create('commented_to_node', array('uid' => $comment->uid));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_comment->set($comment);
  $wrapper->save();
}

/**
 * Implements hook_votingapi_insert().
 */
function drupalhub_users_votingapi_insert($votes) {
  $vote = $votes[0];
  $wrapper = entity_metadata_wrapper($vote['entity_type'], $vote['entity_id']);
  $identifier = $wrapper->type() . ':' . $wrapper->getIdentifier();
  $uri = entity_uri($wrapper->type(), $wrapper->value());

  // Check if there any message for the entity the user just voted for.
  $query = new EntityFieldQuery();
  $count = $query
    ->entityCondition('entity_type', 'message')
    ->propertyCondition('uid', $vote['uid'])
    ->fieldCondition('field_entity_identifier', 'value', $identifier)
    ->count()
    ->execute();

  if ($count) {
    // The user already voted/down voted for the entity. We don't need to create
    // another message for that.
    return;
  }

  // Get default variables.
  $type = $wrapper->type() == 'comment' ? t('comment') : t('node');
  $label = $wrapper->label();
  $action = $vote['value'] === 1 ? t('Up voted') : t('Down voted');
  $uri = $uri['path'];

  // Create the message.
  $message = message_create('user_down_up_voted', array('uid' => $vote['uid']));
  $message->arguments = array(
    '@uri' => $uri,
    '@type' => $type,
    '@label' => $label,
    '@action' => $action,
  );
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_entity_identifier->set($identifier);
  $wrapper->save();
}

/**
 * Get the user picture.
 *
 * @param $user
 *   The user object.
 * @param $style_name
 *   The style name.
 *
 * @return string
 *   HTML of the user picture.
 */
function drupalhub_users_user_picture($user, $style_name) {

  if ($user->picture) {
    return image_style_url($style_name, $user->picture->uri);
  }

  if ($image = _gravatar_get_account_user_picture($user)) {
    return $image;
  }
  return file_create_url(file_load(variable_get('default_user_picture_fid'))->uri);
}
